       	       	    +---------------------------+
		    |		EE 415		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Carter Moore <carter@kaist.ac.kr>
Ziad Al Alami <zezolemeilleur@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct vm_entry{
        struct list_elem list_elem;
        enum page_type type;
        bool is_write;
        size_t swap_slot;
        void* vaddr; // The address of the page, and the VPN is found from it
        struct file *file;
        int offset;
        uint32_t read_bytes;
        uint32_t zero_bytes;
        bool is_swapped;
        int swap_index; // Which bitmap index in swap table contains this page, if none, it is -1
};



---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.
We add all the page structs to a global linked list LRU list, and then we iterate over the list and check whether the physical address given matches the base physical address of the frame in the LRU list

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

When accessing the frame from the kernel virtual address, manually check and update the accessed/dirty bits for the corresponding user virtual address.
This ensures that the kernel and user mappings remain consistent.
---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?
A semaphore called lru_sema is used to ensure synchronization and prevent any race conditions when adding to the list

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

It is not hard to use a list as a data structure and it is easy to add to, remove from, and iterate through.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct page
{
        void* phys_address;
        struct vm_entry *vme;
        struct thread *thread;
        struct list_elem list_elem;
};


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
I use the hand clock algorithm to emitate the LRU algorithm and choose a victim to swap to the SWAP partition in the disk

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?
I free the entry of the page table that was used by process Q and I free the page memory assigned to it.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.
I check the fault address and compare it to the esp, if the difference is less than or equal to 32 bytes and the fault address is within user address boundaries, I assume the stack wants to grow and allocate more space (maximum stack space is 8 MB)

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)
Exiting the process instead of using kill prevents a deadlock
We use semaphores in both the VM_entries and the physical frames struct for the remove, add, iterate operations.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?
First, when P causes a page fault, Q's page gets sent to the swap partition (or simply dropped if it is not ANON page and not written to because it can always be loaded). Then if Q faults the page back in, it will replace another page chosen as a victim by the clock hand algorithm.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?
The page will still be read when process Q tries to evict the frame. However, process P still does not add the page to the page table entry until it is ready at the end.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

I check if the pages are ANON files, and if they are, I swap them in from the disk to the memory. If the VA is an invalid VA, the process exits.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.
I only use locks when I want to change any of the VM_entry lists or the physical frames LRU list. This makes it simpler to understand and to use, and is somewhere between using one lock and many locks. I chose it to be this way because it is simple to implement and also quite efficient as in it is only restricted to a few operations.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct mmap_entry {
	struct list_elem list_elem;
	struct vm_entry* vme;
	int id;
	struct file* file;
};

Used to keep track of a page mapped by mmap. A list of these is now stored in each thread.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When mmap is called for a given address, we mark the associated page in our supplemental page table as full, as well as any adjacent pages needed to fit the file size. These entries are given their own references to the mapped file, and some other metadata. We also add a new mmap_entry to the list within the current thread, and return an ID that is the memory address mapped to.

When an address is unmapped, we scan through the current thread's mmap_entry list, processing any entries that match the unmapped ID. Any such entries are removed from the list, and the data at the associated virtual address is written back to the file in the proper location if the dirty bit is set. Additionally, we process all remaining mmap_entry's when the current thread exits.

The page fault behavior is similar to data demand-paged from executables. We have a file pointer in the vm_entry, as well as the number of read_bytes and zero_bytes. When a page fault occurs, we lazily load read_bytes into that page.

The eviction behavior does not behave specially.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before performing the mapping, we do a few checks. First, we check if the address we are attempting to map to is after the data/code segments of the process. Then, we check if the last address to be mapped is before the max stack value (which we have hard-coded). Finally, for the given address and every additional address that needs to be mapped (increasing by the size of one page until we have enough space for the whole file) we check that these addresses are free to be used in our supplemental page table.
---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We chose to share most of the implementation with data demand-paged from executables, as we figured it was best to avoid duplciating logic. As such, we re-used the file pointer, read_bytes, and zero_bytes already in the vm_entry, as well as the same page fault handling logic.

The extra need of the mmap mappings being written to file was handled by the mmap_entry list in each thread, which handles writing to file upon munmap calls or if the thread exits.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
