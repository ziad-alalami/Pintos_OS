       	     +-------------------------+
		     |		   EE 415	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

ZIAD AL-ALAMI	   zezolemeilleur@kaist.ac.kr
CARTER MOORE	   carter@kaist.ac.kr

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We implemented everything but we had a problem with the persistency tests. 


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define DIRECT_BLOCK_ENTRIES 124

#define INDIRECT_BLOCK_ENTRIES (BLOCK_SECTOR_SIZE / sizeof(block_sector_t))

#define DOUBLE_INDIRECT_BLOCK_ENTRIES (INDIRECT_BLOCK_ENTRIES * INDIRECT_BLOCK_ENTRIES)

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
  {
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    block_sector_t direct_map_table[DIRECT_BLOCK_ENTRIES];
    block_sector_t indirect_block_sec;
    block_sector_t double_indirect_block_sec;
  };

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There are 124 direct entries, BLOCK_SECTOR_SIZE / sizeof(block_sector_t) = 128 indirect entries, and INDIRECT_BLOCK_ENTRIES * INDIRECT_BLOCK_ENTRIES = 128 * 128 = 16384 doubly indirect entires.

So in total, there are a maximum of 124 + 128 + 16384 = 16636 blocks available for a file.

Each block is 512 bytes, so the max file size is 16636 * 512 = 8517632 bytes.

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

Didn't do this

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

Didn't do this

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

Didn't do this

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Yes, our inode struture uses multilevel indexing, as recommended in the powerpoints. There are 124 direct entries, 128 indirect entries, and 16384 double indirect entries.

This combination is good as it allows us to fully make use of the available 512 bytes available in the inode_disk struct while also enabling files to go up to 8MB. We use as much space in the struct as possible for direct entries, saving 4 bytes for an indirect table pointer and 4 bytes for a doubly indirect table pointer. This way, we have as many direct entries as possible to allow smaller files to be manipulated very quickly. Then the number of indirect and doubly indirect entries logically follows, as we use one full block for the indirect table, and one full block for the doubly indirect table with each entry in that table pointer to its own full block indirect table.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct dir* curr_dir; 	/struct thread to keep track of the cwd
struct lock lock; 	/struct inode for syncrhonization
bool is_dir;		/struct inode_disk to know whether the file is a dir or not
block_sector_t parent; /to point to the parent (parent dir). for root dir it is NULL

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
Parsing the name and breaking the "/" in it.
Absolute paths are defined if the path starts with a "/" rather than a directory
An empty path name would indicate the cwd
After parsing each "/", the temp_dir becomes that new dir if it exists, and closes the previous temp_dir
If the destination file does not exist then the cwd stays the same and the process does not proceed

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
For these operations (create, remove, readdir,...), a lock system is used for accessing and that lock is special for each inode. No synchronization is required between different inodes. Also for example, in the remove function, we check if the node is not already removed (because another thread could have removed that inode so we do not want to remove it again)

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?
The remove function does not directly remove the inode. First, we check if it isused by other processes (open_cnt > 1). If so we just mark it to be removed and reduce the open_cnt. When the open_cnt reaches 0, we remove the allocated resources to that inode. If open_cnt reaches 0 but it was not marked for removal, we just write it back to the disk.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.
Using the dir struct would be the most reasonable to represent a thread's directory and because it allows us to access all the API's needed without conflicts.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct buffer_head {
  uint8_t* data; /* Pointer to virtual memory buffer */
  bool dirty; /* Whether this buffer has been modified since read */
  bool used; /* Whether this buffer is in use*/
  bool access; /* Whether this buffer has been accessed recently */
  block_sector_t sector_idx; /* On disk block sector associated with this buffer */
};

# define BUFFER_SIZE 64
/* Array of 64 buffer_heads used for the filesys buffer cache */
struct buffer_head* buffer_heads;

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use a clock algorithm for replacement. So we have flags to keep track of whether a buffer slot is in use, and whether it is in use. When a buffer slot is accessed, we set its accessed bit. When we need to evict, we scan through the buffer until we find a slot that is either not used or not accessed recently. If an access bit is currently true when it is scanned we set it to false, and move on to the next entry.

>> C3: Describe your implementation of write-behind.

We keep track of a dirty flag for each buffer cache entry. If that block is written to, then we set the flag to true. When the block is evicted, or when the filesystem is closed, we write back all dirty entries to disk.

>> C4: Describe your implementation of read-ahead.

Didn't do this

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

Didn't do this

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

Didn't do this

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

Buffer caching is useful for file workloads where temporal locality is prominent (e.g. we are accessing the same few parts of a file multiple times).

Read-ahead would be useful if we are reading a file in sequence. For example, reading an entire file.

Write-behind would be useful for files that are edited often, particularly in the same area. For example, updating log files.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
